// We need to define a max-width for the row
// One of the standards that is used these days is to make it 1.140 px grid
// But we want to use rem, not pixels, so we divide this by 10
// Because, remember, in base/_base.css we defined 10px = 1rem
//
// max-width indicates that, if we have enough available space, then it will have the
// width that we specifed, but if there is not enough width (the viewport is smaller
// than 114rem) then it will simple fill 100% of the available space that it has.
.row {
  max-width: $grid-width;
  margin: 0 auto; // center block elements inside of another block element

  // not pseudo-selector: remove the last margin-bottom
  &:not(:last-child) {
    margin-bottom: $gutter-vertical; // space between rows is called gutter
  }

  // Using mixing
  @include clearfix;

  // Using the attribute selector to avoid repetition in .col-
  [class^='col-'] {
    // Floating the columns
    // All of the child elements of this row element are floated, and so
    // the height collapsed and becomes zero.
    // We use the clearfix hack to fix it.
    float: left;
    // To see the gutter (The gutter will be the right margin of each column, except in
    // the last one)
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    // Calculating the width of each column.
    // We use calc() in which we can mix units
    // To work with Sass, we have to use the hash and wrap the variable into curly braces.
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - (2 * #{$gutter-horizontal})) / 3);
  }

  .col-2-of-3 {
    width: calc(100% - ((100% + #{$gutter-horizontal}) / 3));
  }

  .col-1-of-4 {
    width: calc((100% - (3 * #{$gutter-horizontal})) / 4);
  }

  .col-2-of-4 {
    width: calc(100% - ((100% + #{$gutter-horizontal}) / 2));
  }

  .col-3-of-4 {
    width: calc(100% - ((100% + #{$gutter-horizontal}) / 4));
  }
}
